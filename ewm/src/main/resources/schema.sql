DROP TABLE IF EXISTS users, categories, events, compilations, events_compilations, requests, locator;

CREATE TABLE IF NOT EXISTS users (
    id    BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name  VARCHAR(128) NOT NULL,
    email VARCHAR(128) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS categories (
    id   BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    name VARCHAR(128) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS events (
    id                 BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    annotation         VARCHAR(2000) NOT NULL,
    category_id        BIGINT NOT NULL REFERENCES categories ON DELETE CASCADE,
    confirmed_requests BIGINT,
    created_on         TIMESTAMP WITHOUT TIME ZONE,
    description        VARCHAR(7000),
    event_date         TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    initiator_id       BIGINT NOT NULL REFERENCES users ON DELETE CASCADE,
    lat                FLOAT NOT NULL,
    lon                FLOAT NOT NULL,
    paid               BOOL NOT NULL,
    participant_limit  BIGINT,
    published_on       TIMESTAMP WITHOUT TIME ZONE,
    request_moderation BOOL,
    state              VARCHAR(64),
    title              VARCHAR(120) NOT NULL,
    views              BIGINT
);

CREATE TABLE IF NOT EXISTS compilations (
    id     BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    title  VARCHAR(120) NOT NULL UNIQUE,
    pinned BOOL         NOT NULL
);

CREATE TABLE IF NOT EXISTS events_compilations (
    event_id       BIGINT REFERENCES events (id) ON DELETE CASCADE,
    compilation_id BIGINT REFERENCES compilations (id) ON DELETE CASCADE,
    PRIMARY KEY (event_id, compilation_id)
);

CREATE TABLE IF NOT EXISTS requests (
    id           BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    event_id     BIGINT NOT NULL REFERENCES events (id),
    requester_id BIGINT NOT NULL REFERENCES users (id),
    created      TIMESTAMP WITHOUT TIME ZONE,
    status       VARCHAR(10),
    UNIQUE (event_id, requester_id)
);

CREATE TABLE IF NOT EXISTS events_area (
    id        BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    lat       FLOAT NOT NULL,
    lon       FLOAT NOT NULL,
    distance  FLOAT NOT NULL,
    name      VARCHAR(50) UNIQUE,
    UNIQUE (lat, lon)
);

CREATE OR REPLACE FUNCTION distance(lat1 float, lon1 float, lat2 float, lon2 float)
    RETURNS float
AS
'
declare
    dist float = 0;
    rad_lat1 float;
    rad_lat2 float;
    theta float;
    rad_theta float;
BEGIN
    IF lat1 = lat2 AND lon1 = lon2
    THEN
        RETURN dist;
    ELSE
        -- переводим градусы широты в радианы
        rad_lat1 = pi() * lat1 / 180;
        -- переводим градусы долготы в радианы
        rad_lat2 = pi() * lat2 / 180;
        -- находим разность долгот
        theta = lon1 - lon2;
        -- переводим градусы в радианы
        rad_theta = pi() * theta / 180;
        -- находим длину ортодромии
        dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);

        IF dist > 1
            THEN dist = 1;
        END IF;

        dist = acos(dist);
        -- переводим радианы в градусы
        dist = dist * 180 / pi();
        -- переводим градусы в километры
        dist = dist * 60 * 1.8524;

        RETURN dist;
    END IF;
END;
'
LANGUAGE PLPGSQL;